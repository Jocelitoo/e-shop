datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model User {
    id             String    @id @default(auto()) @map("_id") @db.ObjectId
    name           String?   @unique
    email          String?   @unique
    emailVerified  DateTime?
    image          String?
    hashedPassword String?
    createdAt      DateTime  @default(now())
    updatedAt      DateTime  @updatedAt
    role           Role      @default(USER)

    Account             Account[]
    orders              Order[]
    reviews             Review[]
    UserOTPVerification UserOTPVerification?
    ResetPasswordOTPVerification ResetPasswordOTPVerification?
}

model Order {
    id              String          @id @default(auto()) @map("_id") @db.ObjectId
    userId          String          @db.ObjectId
    amount          Float
    currency        String
    status          String
    deliveryStatus  String?
    createdDate     DateTime        @default(now())
    paymentIntentId String          @unique
    products        CartItemProps[]
    address         Address?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Product {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    name        String
    description String
    price       Float
    brand       String
    category    String
    inStock     Int
    createdDate DateTime @default(now())
    images      Images[]
    reviews     Review[]
}

type Images {
    color     String
    colorCode String
    image     String
}

model Review {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    userId      String   @db.ObjectId
    userName    String
    productId   String   @db.ObjectId
    rating      Int
    comment     String
    createdDate DateTime @default(now())

    product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
    user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserOTPVerification {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    userId    String   @unique @db.ObjectId
    otp       String
    createdAt DateTime @default(now())
    expiresAt DateTime

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ResetPasswordOTPVerification {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    userId    String   @unique @db.ObjectId
    otp       String
    createdAt DateTime @default(now())
    expiresAt DateTime

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

type CartItemProps {
    id       String
    name     String
    price    Float
    quantity Int
    total    Float
    color    String
    imageUrl String
    inStock  Int
}

type Address {
    city        String
    country     String
    line1       String
    line2       String?
    postal_code String
    state       String
}

enum Role {
    USER
    ADMIN
}
